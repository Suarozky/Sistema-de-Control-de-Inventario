<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          animation: {
            'fadeIn': 'fadeIn 0.3s ease-in-out',
          },
          keyframes: {
            fadeIn: {
              '0%': { opacity: '0', transform: 'translateY(10px)' },
              '100%': { opacity: '1', transform: 'translateY(0)' },
            }
          }
        }
      }
    }
  </script>
</head>
<body class="m-0 font-sans bg-gray-100 w-full ">
  <div class="flex gap-5 h-screen w-full md:flex-row max-md:flex-col">
    

    <!-- Main Area -->
    <div class="flex-1 flex flex-col gap-5 overflow-hidden w-full">
      <!-- Topbar compacto - Manteniendo la l√≥gica Rails original -->
      <div class="bg-white border w-[97%] border-gray-200 rounded-lg shadow-sm p-4">
        <div class="flex flex-wrap items-end gap-4 justify-between">
          <!-- Lado izquierdo: B√∫squeda y filtros -->
          <div class="flex items-end gap-4 flex-1">
            <!-- B√∫squeda por modelo/marca -->
            <div class="flex flex-col gap-1">
              <label class="text-xs text-gray-600 font-medium">Buscar por modelo/marca</label>
              <input type="text" id="product-search" class="px-4 py-2 border border-gray-300 rounded-md text-sm w-64 focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-100" placeholder="Ingresa modelo o marca...">
            </div>
            
            <!-- Fechas -->
            <div class="flex items-end gap-2">
              <div class="flex flex-col gap-1">
                <label class="text-xs text-gray-600 font-medium">Desde</label>
                <input type="date" id="date-from" class="px-3 py-2 border border-gray-300 rounded-md text-xs w-32 focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-100">
              </div>
              <div class="flex flex-col gap-1">
                <label class="text-xs text-gray-600 font-medium">Hasta</label>
                <input type="date" id="date-to" class="px-3 py-2 border border-gray-300 rounded-md text-xs w-32 focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-100">
              </div>
            </div>

            <!-- Bot√≥n limpiar -->
            <button class="px-4 py-2 bg-gray-500 text-white rounded-md text-xs hover:bg-gray-600 transition-colors duration-200" onclick="clearAllFilters()">
              Limpiar
            </button>
          </div>

          <!-- Lado derecho: Importar, Exportar y Crear -->
          <div class="flex items-end gap-3 flex-wrap">
            <!-- Formularios de importaci√≥n (Rails originales) -->
            <form action="/products/import" method="post" enctype="multipart/form-data" class="flex items-end gap-2">
              <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
              <div class="flex flex-col gap-1">
                <label class="text-xs text-gray-600 font-medium">Importar Productos</label>
                <input type="file" name="file" required class="border-2 border-dashed border-gray-300 rounded-md bg-gray-50 text-xs file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100">
              </div>
              <button type="submit" class="px-3 py-1.5 bg-blue-500 text-white rounded-md text-xs hover:bg-blue-600">
                Importar
              </button>
            </form>

            <form action="/brands/import" method="post" enctype="multipart/form-data" class="flex items-end gap-2">
              <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
              <div class="flex flex-col gap-1">
                <label class="text-xs text-gray-600 font-medium">Importar Marcas</label>
                <input type="file" name="file" required class="border-2 border-dashed border-gray-300 rounded-md bg-gray-50 text-xs file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100">
              </div>
              <button type="submit" class="px-3 py-1.5 bg-blue-500 text-white rounded-md text-xs hover:bg-blue-600">
                Importar
              </button>
            </form>

            <form action="/models/import" method="post" enctype="multipart/form-data" class="flex items-end gap-2">
              <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
              <div class="flex flex-col gap-1">
                <label class="text-xs text-gray-600 font-medium">Importar Modelos</label>
                <input type="file" name="file" required class="border-2 border-dashed border-gray-300 rounded-md bg-gray-50 text-xs file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100">
              </div>
              <button type="submit" class="px-3 py-1.5 bg-blue-500 text-white rounded-md text-xs hover:bg-blue-600">
                Importar
              </button>
            </form>

            <!-- Exportar -->
            <div class="flex items-end gap-2">
              <div class="flex flex-col gap-1">
                <label class="text-xs text-gray-600 font-medium">Exportar</label>
                <select id="export-type" class="px-3 py-1.5 border border-gray-300 rounded-md bg-white text-xs focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-100">
                  <option value="product">Productos</option>
                  <option value="brand">Marcas</option>
                  <option value="model">Modelos</option>
                </select>
              </div>
              <button id="download-btn" class="px-3 py-1.5 rounded-md bg-blue-500 text-white text-xs hover:bg-blue-600 transition-colors duration-200">
                Exportar
              </button>
            </div>

            <!-- Crear -->
            <div class="flex flex-col gap-1">
              <label class="text-xs text-gray-600 font-medium opacity-0">Crear</label>
              <a href="/products/new" class="px-4 py-1.5 bg-green-500 text-white rounded-md text-xs hover:bg-green-600 transition-colors duration-200">
                Crear
              </a>
            </div>
          </div>
        </div>
      </div>

      <!-- Informaci√≥n de resultados y paginaci√≥n superior -->
      <div class="flex justify-between items-center w-[97%] py-2.5 text-gray-600 text-sm border-b border-gray-200 mb-4">
        <span id="results-count">Mostrando todos los resultados</span>
        <div class="flex items-center gap-2">
          <span class="text-xs">Productos por p√°gina:</span>
          <select id="items-per-page" class="px-2 py-1 border border-gray-300 rounded text-xs focus:outline-none focus:border-blue-500">
            <option value="10">10</option>
            <option value="20">20</option>
            <option value="50">50</option>
          </select>
        </div>
      </div>

      <!-- Contenido de Rails -->
      <div id="products" class="flex flex-col w-[97%] gap-2.5 overflow-y-auto flex-1 pr-2 animate-fadeIn">
        <div class="bg-white border border-gray-200 rounded-lg p-4 transition-all duration-200 mb-2.5 hover:border-blue-500 hover:shadow-lg hover:shadow-blue-100">
          Listado de Productos
        </div>
        <%= render partial: "shared/cardProduct", collection: @products, as: :product %>
      </div>

      <!-- Controles de paginaci√≥n -->
      <div id="pagination-controls" class="flex justify-center items-center gap-2 py-4 w-[97%] bg-white border border-gray-200 rounded-lg shadow-sm">
        <button id="prev-page" class="px-3 py-2 text-sm bg-gray-100 text-gray-600 rounded-md hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
          ‚Üê Anterior
        </button>
        
        <div id="page-numbers" class="flex gap-1">
          <!-- Los n√∫meros de p√°gina se generar√°n din√°micamente -->
        </div>
        
        <button id="next-page" class="px-3 py-2 text-sm bg-gray-100 text-gray-600 rounded-md hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed">
          Siguiente ‚Üí
        </button>
      </div>
    </div>
  </div>

  <script>
    class DashboardManager {
      constructor() {
        this.filters = {
          productSearch: '',
          dateFrom: '',
          dateTo: ''
        };
        this.pagination = {
          currentPage: 1,
          itemsPerPage: 10,
          totalItems: 0,
          totalPages: 0
        };
        this.filteredProducts = [];
        this.allProducts = [];
        this.init();
      }

      init() {
  this.bindEvents();
  this.loadProducts();
  this.applyFiltersAndPaginate(); // en lugar de solo updateDisplay()
}


      loadProducts() {
        // Obtener todos los elementos .card dentro de #products (excluyendo el t√≠tulo)
        this.allProducts = Array.from(document.querySelectorAll('#products .card'));
        this.filteredProducts = [...this.allProducts];
        console.log('üì¶ Productos cargados:', this.allProducts.length);
      }

      bindEvents() {
        // Filtros de productos
        const productSearch = document.getElementById('product-search');
        const dateFrom = document.getElementById('date-from');
        const dateTo = document.getElementById('date-to');

        if (productSearch) {
          productSearch.addEventListener('input', (e) => {
            this.filters.productSearch = e.target.value.toLowerCase().trim();
            this.applyFiltersAndPaginate();
          });
        }

        if (dateFrom) {
          dateFrom.addEventListener('change', () => {
            this.filters.dateFrom = document.getElementById('date-from').value;
            this.applyFiltersAndPaginate();
          });
        }

        if (dateTo) {
          dateTo.addEventListener('change', () => {
            this.filters.dateTo = document.getElementById('date-to').value;
            this.applyFiltersAndPaginate();
          });
        }

        // Paginaci√≥n
        const itemsPerPageSelect = document.getElementById('items-per-page');
        const prevBtn = document.getElementById('prev-page');
        const nextBtn = document.getElementById('next-page');

        if (itemsPerPageSelect) {
          itemsPerPageSelect.addEventListener('change', (e) => {
            this.pagination.itemsPerPage = parseInt(e.target.value);
            this.pagination.currentPage = 1; // Resetear a la primera p√°gina
            this.applyFiltersAndPaginate();
          });
        }

        if (prevBtn) {
          prevBtn.addEventListener('click', () => {
            if (this.pagination.currentPage > 1) {
              this.pagination.currentPage--;
              this.updateDisplay();
            }
          });
        }

        if (nextBtn) {
          nextBtn.addEventListener('click', () => {
            if (this.pagination.currentPage < this.pagination.totalPages) {
              this.pagination.currentPage++;
              this.updateDisplay();
            }
          });
        }

        // Exportaci√≥n
        const downloadBtn = document.getElementById('download-btn');
        const exportSelect = document.getElementById('export-type');

        if (downloadBtn && exportSelect) {
          downloadBtn.addEventListener('click', (e) => {
            e.preventDefault();
            const type = exportSelect.value;
            const url = `/products/export?type=${type}`;
            window.location.href = url;
          });
        }
      }

      applyFiltersAndPaginate() {
        this.applyFilters();
        this.pagination.currentPage = 1; // Resetear a la primera p√°gina cuando se filtran
        this.updateDisplay();
      }

      applyFilters() {
        this.filteredProducts = this.allProducts.filter(product => {
          let shouldShow = true;
          
          // Obtener solo el texto de los spans .display-field
          const displayFields = product.querySelectorAll('.display-field');
          let modelo = '';
          let marca = '';
          let owner = '';
          let fecha = '';
          
          if (displayFields.length >= 4) {
            modelo = displayFields[0].textContent.trim().toLowerCase();
            marca = displayFields[1].textContent.trim().toLowerCase();
            owner = displayFields[2].textContent.trim().toLowerCase();
            fecha = displayFields[3].textContent.trim();
          }

          // Filtro de b√∫squeda por texto
          if (this.filters.productSearch) {
            const searchTerm = this.filters.productSearch;
            
            // Buscar en modelo, marca y owner
            const modeloMatch = modelo.includes(searchTerm);
            const marcaMatch = marca.includes(searchTerm);
            const ownerMatch = owner.includes(searchTerm);
            
            shouldShow = modeloMatch || marcaMatch || ownerMatch;
          }

          // Filtro de fecha
          if (shouldShow && (this.filters.dateFrom || this.filters.dateTo)) {
            const productDate = this.parseDate(fecha);
            
            if (productDate) {
              if (this.filters.dateFrom) {
                const fromDate = new Date(this.filters.dateFrom);
                shouldShow = shouldShow && productDate >= fromDate;
              }
              
              if (this.filters.dateTo) {
                const toDate = new Date(this.filters.dateTo);
                shouldShow = shouldShow && productDate <= toDate;
              }
            } else if (this.filters.dateFrom || this.filters.dateTo) {
              shouldShow = false;
            }
          }

          return shouldShow;
        });

        this.pagination.totalItems = this.filteredProducts.length;
        this.pagination.totalPages = Math.ceil(this.pagination.totalItems / this.pagination.itemsPerPage);
      }

      updateDisplay() {
        // Ocultar todos los productos primero
        this.allProducts.forEach(product => {
          product.classList.add('hidden');
        });

        // Calcular qu√© productos mostrar en la p√°gina actual
        const startIndex = (this.pagination.currentPage - 1) * this.pagination.itemsPerPage;
        const endIndex = startIndex + this.pagination.itemsPerPage;
        const productsToShow = this.filteredProducts.slice(startIndex, endIndex);

        // Mostrar solo los productos de la p√°gina actual
        productsToShow.forEach(product => {
          product.classList.remove('hidden');
        });

        this.updateResultsCount();
        this.updatePaginationControls();

        console.log('üìÑ P√°gina actual:', this.pagination.currentPage);
        console.log('üì¶ Mostrando productos:', startIndex + 1, 'a', Math.min(endIndex, this.pagination.totalItems));
      }

      updateResultsCount() {
        const resultsCount = document.getElementById('results-count');
        if (resultsCount) {
          const startIndex = (this.pagination.currentPage - 1) * this.pagination.itemsPerPage;
          const endIndex = Math.min(startIndex + this.pagination.itemsPerPage, this.pagination.totalItems);
          
          if (this.pagination.totalItems === 0) {
            resultsCount.textContent = 'No se encontraron resultados';
          } else if (this.pagination.totalPages === 1) {
            resultsCount.textContent = `Mostrando todos los resultados (${this.pagination.totalItems})`;
          } else {
            resultsCount.textContent = `Mostrando ${startIndex + 1}-${endIndex} de ${this.pagination.totalItems} resultados`;
          }
        }
      }

      updatePaginationControls() {
        const prevBtn = document.getElementById('prev-page');
        const nextBtn = document.getElementById('next-page');
        const pageNumbers = document.getElementById('page-numbers');

        // Actualizar botones anterior/siguiente
        if (prevBtn) {
          prevBtn.disabled = this.pagination.currentPage <= 1;
        }

        if (nextBtn) {
          nextBtn.disabled = this.pagination.currentPage >= this.pagination.totalPages;
        }

        // Generar n√∫meros de p√°gina
        if (pageNumbers) {
          pageNumbers.innerHTML = '';
          
          if (this.pagination.totalPages <= 1) {
            return;
          }

          // Calcular rango de p√°ginas a mostrar
          const maxButtons = 7;
          let startPage = Math.max(1, this.pagination.currentPage - Math.floor(maxButtons / 2));
          let endPage = Math.min(this.pagination.totalPages, startPage + maxButtons - 1);
          
          // Ajustar si estamos cerca del final
          if (endPage - startPage < maxButtons - 1) {
            startPage = Math.max(1, endPage - maxButtons + 1);
          }

          // Bot√≥n primera p√°gina
          if (startPage > 1) {
            this.createPageButton(pageNumbers, 1, false);
            if (startPage > 2) {
              const ellipsis = document.createElement('span');
              ellipsis.textContent = '...';
              ellipsis.className = 'px-2 py-1 text-gray-500';
              pageNumbers.appendChild(ellipsis);
            }
          }

          // Botones de p√°ginas
          for (let i = startPage; i <= endPage; i++) {
            this.createPageButton(pageNumbers, i, i === this.pagination.currentPage);
          }

          // Bot√≥n √∫ltima p√°gina
          if (endPage < this.pagination.totalPages) {
            if (endPage < this.pagination.totalPages - 1) {
              const ellipsis = document.createElement('span');
              ellipsis.textContent = '...';
              ellipsis.className = 'px-2 py-1 text-gray-500';
              pageNumbers.appendChild(ellipsis);
            }
            this.createPageButton(pageNumbers, this.pagination.totalPages, false);
          }
        }
      }

      createPageButton(container, pageNumber, isActive) {
        const button = document.createElement('button');
        button.textContent = pageNumber;
        button.className = `px-3 py-1 text-sm rounded-md transition-colors duration-200 ${
          isActive 
            ? 'bg-blue-500 text-white' 
            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
        }`;
        
        if (!isActive) {
          button.addEventListener('click', () => {
            this.pagination.currentPage = pageNumber;
            this.updateDisplay();
          });
        }
        
        container.appendChild(button);
      }

      parseDate(dateStr) {
        // Convierte fechas en m√∫ltiples formatos a objeto Date
        const cleanDate = dateStr.trim().replace(/[-\.]/g, '/');
        
        let parts = cleanDate.split('/');
        
        // Formato dd/mm/yyyy
        if (parts.length === 3 && parts[2].length === 4) {
          const day = parseInt(parts[0], 10);
          const month = parseInt(parts[1], 10) - 1;
          const year = parseInt(parts[2], 10);
          
          if (!isNaN(day) && !isNaN(month) && !isNaN(year) && 
              day >= 1 && day <= 31 && month >= 0 && month <= 11) {
            return new Date(year, month, day);
          }
        }
        
        // Formato yyyy/mm/dd
        if (parts.length === 3 && parts[0].length === 4) {
          const year = parseInt(parts[0], 10);
          const month = parseInt(parts[1], 10) - 1;
          const day = parseInt(parts[2], 10);
          
          if (!isNaN(day) && !isNaN(month) && !isNaN(year) && 
              day >= 1 && day <= 31 && month >= 0 && month <= 11) {
            return new Date(year, month, day);
          }
        }
        
        // Intentar con Date.parse como √∫ltimo recurso
        const parsedDate = new Date(dateStr);
        if (!isNaN(parsedDate.getTime())) {
          return parsedDate;
        }
        
        return null;
      }

      clearFilters() {
        // Limpiar inputs
        const productSearch = document.getElementById('product-search');
        const dateFrom = document.getElementById('date-from');
        const dateTo = document.getElementById('date-to');

        if (productSearch) productSearch.value = '';
        if (dateFrom) dateFrom.value = '';
        if (dateTo) dateTo.value = '';

        // Limpiar filtros internos
        this.filters = {
          productSearch: '',
          dateFrom: '',
          dateTo: ''
        };

        // Resetear paginaci√≥n
        this.pagination.currentPage = 1;
        
        // Aplicar filtros y actualizar display
        this.applyFilters();
        this.updateDisplay();
      }
    }

    // Funci√≥n global para limpiar filtros
    function clearAllFilters() {
      if (window.dashboardManager) {
        window.dashboardManager.clearFilters();
      }
    }

    // Inicializaci√≥n
    document.addEventListener('DOMContentLoaded', function() {
      window.dashboardManager = new DashboardManager();
      console.log('‚úÖ Dashboard Manager con paginaci√≥n inicializado');
    });
  </script>
</body>
</html>