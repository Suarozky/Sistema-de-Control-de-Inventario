<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          animation: {
            'fadeIn': 'fadeIn 0.3s ease-in-out',
          },
          keyframes: {
            fadeIn: {
              '0%': { opacity: '0', transform: 'translateY(10px)' },
              '100%': { opacity: '1', transform: 'translateY(0)' },
            }
          }
        }
      }
    }
  </script>
</head>
<body class="m-0 font-sans bg-gray-100 w-full">
  <div class="flex gap-5 h-screen w-full md:flex-row max-md:flex-col">
   
    <!-- Main Area -->
    <div class="flex-1 flex flex-col gap-5 overflow-hidden w-full">
      <!-- Topbar -->
      <div class="bg-white border w-[97%] border-gray-200 rounded-lg flex items-center justify-between p-5 shadow-sm">
       <div class="flex flex-wrap gap-4 items-center w-full max-md:flex-col max-md:items-stretch">
  <!-- Filtro de b√∫squeda -->
  <div class="flex flex-col gap-1 flex-1 min-w-0 ">
    <label class="text-xs text-gray-600 font-medium">Buscar por nombre/apellido</label>
    <input type="text" id="user-search" class="px-4 py-2.5 border-2 border-gray-200 rounded-md text-sm transition-all duration-200 focus:outline-none focus:border-blue-500 focus:ring-2 focus:ring-blue-100" placeholder="Ingresa nombre o apellido...">
  </div>

  <!-- Bot√≥n limpiar -->
  <button class="px-4 py-2 bg-gray-500 text-white rounded-md text-xs hover:bg-gray-600 transition-colors duration-200" onclick="clearAllFilters()">
    Limpiar
  </button>

  <!-- Importar usuarios -->
  <form action="/users/import" method="post" enctype="multipart/form-data" class="flex gap-2 items-end">
    <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
    <div class="flex flex-col gap-1">
      <label class="text-xs text-gray-600 font-medium">Importar archivo</label>
      <input type="file" name="file" required class="border-2 border-dashed border-gray-300 rounded-md bg-gray-50 text-xs file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100">
    </div>
    <button type="submit" class="bg-blue-500 text-white border-none px-4 py-2.5 rounded-md cursor-pointer text-xs font-medium transition-all duration-200 hover:bg-blue-600 whitespace-nowrap">
      Importar
    </button>
   
    <a href="/users/new" class="bg-green-500 text-white border-none px-4 py-2.5 rounded-md cursor-pointer text-xs font-medium transition-all duration-200 hover:bg-green-600 whitespace-nowrap">Crear</a>
  </form>
    
  <button id="download-btn" class="bg-blue-500 text-white border-none mt-5 px-4 py-2.5 rounded-md cursor-pointer text-xs font-medium transition-all duration-200 hover:bg-green-600 whitespace-nowrap">
    Exportar
  </button>
</div>
      </div>

      <!-- Informaci√≥n de resultados y paginaci√≥n superior -->
      <div class="flex justify-between items-center w-[97%] py-2.5 text-gray-600 text-sm border-b border-gray-200 mb-4">
        <span id="results-count">Mostrando todos los resultados</span>
        <div class="flex items-center gap-2">
          <span class="text-xs">Usuarios por p√°gina:</span>
          <select id="items-per-page" class="px-2 py-1 border border-gray-300 rounded text-xs focus:outline-none focus:border-blue-500">
            <option value="10">10</option>
            <option value="20">20</option>
            <option value="50">50</option>
          </select>
        </div>
      </div>

      <!-- Contenido de Rails -->
      <div id="users" class="flex flex-col w-[97%] gap-2.5 overflow-y-auto flex-1 pr-2 animate-fadeIn">
        <div class="bg-white border border-gray-200 rounded-lg p-4 transition-all duration-200 mb-2.5 hover:border-blue-500 hover:shadow-lg hover:shadow-blue-100">
          Listado de Usuarios
        </div>
        <%= render partial: "shared/cardUser", collection: @users, as: :user %>
      </div>

      <!-- Controles de paginaci√≥n -->
      <div id="pagination-controls" class="flex justify-center items-center gap-2 py-4 w-[97%] bg-white border border-gray-200 rounded-lg shadow-sm">
        <button id="prev-page" class="px-3 py-2 text-sm bg-gray-100 text-gray-600 rounded-md hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed" disabled>
          ‚Üê Anterior
        </button>
        
        <div id="page-numbers" class="flex gap-1">
          <!-- Los n√∫meros de p√°gina se generar√°n din√°micamente -->
        </div>
        
        <button id="next-page" class="px-3 py-2 text-sm bg-gray-100 text-gray-600 rounded-md hover:bg-gray-200 disabled:opacity-50 disabled:cursor-not-allowed">
          Siguiente ‚Üí
        </button>
      </div>
    </div>
  </div>

  <script>
    class DashboardManager {
      constructor() {
        this.filters = {
          userSearch: ''
        };
        this.pagination = {
          currentPage: 1,
          itemsPerPage: 10,
          totalItems: 0,
          totalPages: 0
        };
        this.filteredUsers = [];
        this.allUsers = [];
        this.init();
      }

      init() {
        this.bindEvents();
        this.loadUsers();
        this.applyFiltersAndPaginate();
      }

      loadUsers() {
        // Obtener todos los elementos .card dentro de #users (excluyendo el t√≠tulo)
        this.allUsers = Array.from(document.querySelectorAll('#users > div'))
          .filter(el => !el.textContent.includes('Listado de Usuarios'));
        this.filteredUsers = [...this.allUsers];
        console.log('üë• Usuarios cargados:', this.allUsers.length);
      }

      bindEvents() {
        // Filtro de usuarios
        const userSearch = document.getElementById('user-search');

        if (userSearch) {
          userSearch.addEventListener('input', (e) => {
            this.filters.userSearch = e.target.value.toLowerCase().trim();
            this.applyFiltersAndPaginate();
          });
        }

        // Paginaci√≥n
        const itemsPerPageSelect = document.getElementById('items-per-page');
        const prevBtn = document.getElementById('prev-page');
        const nextBtn = document.getElementById('next-page');

        if (itemsPerPageSelect) {
          itemsPerPageSelect.addEventListener('change', (e) => {
            this.pagination.itemsPerPage = parseInt(e.target.value);
            this.pagination.currentPage = 1; // Resetear a la primera p√°gina
            this.applyFiltersAndPaginate();
          });
        }

        if (prevBtn) {
          prevBtn.addEventListener('click', () => {
            if (this.pagination.currentPage > 1) {
              this.pagination.currentPage--;
              this.updateDisplay();
            }
          });
        }

        if (nextBtn) {
          nextBtn.addEventListener('click', () => {
            if (this.pagination.currentPage < this.pagination.totalPages) {
              this.pagination.currentPage++;
              this.updateDisplay();
            }
          });
        }

        // Exportaci√≥n
        const downloadBtn = document.getElementById('download-btn');
        if (downloadBtn) {
          downloadBtn.addEventListener('click', (e) => {
            e.preventDefault();
            window.location.href = '/users/export?type=user';
          });
        }
      }

      applyFiltersAndPaginate() {
        this.applyFilters();
        this.pagination.currentPage = 1; // Resetear a la primera p√°gina cuando se filtran
        this.updateDisplay();
      }

      applyFilters() {
        this.filteredUsers = this.allUsers.filter(user => {
          let shouldShow = true;
          
          // Filtro de b√∫squeda - buscar en todo el contenido del usuario
          if (this.filters.userSearch) {
            const textContent = user.textContent.toLowerCase();
            const searchTerm = this.filters.userSearch;
            shouldShow = textContent.includes(searchTerm);
          }

          return shouldShow;
        });

        this.pagination.totalItems = this.filteredUsers.length;
        this.pagination.totalPages = Math.ceil(this.pagination.totalItems / this.pagination.itemsPerPage);
      }

      updateDisplay() {
        // Ocultar todos los usuarios primero
        this.allUsers.forEach(user => {
          user.classList.add('hidden');
        });

        // Calcular qu√© usuarios mostrar en la p√°gina actual
        const startIndex = (this.pagination.currentPage - 1) * this.pagination.itemsPerPage;
        const endIndex = startIndex + this.pagination.itemsPerPage;
        const usersToShow = this.filteredUsers.slice(startIndex, endIndex);

        // Mostrar solo los usuarios de la p√°gina actual
        usersToShow.forEach(user => {
          user.classList.remove('hidden');
        });

        this.updateResultsCount();
        this.updatePaginationControls();

        console.log('üìÑ P√°gina actual:', this.pagination.currentPage);
        console.log('üë• Mostrando usuarios:', startIndex + 1, 'a', Math.min(endIndex, this.pagination.totalItems));
      }

      updateResultsCount() {
        const resultsCount = document.getElementById('results-count');
        if (resultsCount) {
          const startIndex = (this.pagination.currentPage - 1) * this.pagination.itemsPerPage;
          const endIndex = Math.min(startIndex + this.pagination.itemsPerPage, this.pagination.totalItems);
          
          if (this.pagination.totalItems === 0) {
            resultsCount.textContent = 'No se encontraron resultados';
          } else if (this.pagination.totalPages === 1) {
            resultsCount.textContent = `Mostrando todos los resultados (${this.pagination.totalItems})`;
          } else {
            resultsCount.textContent = `Mostrando ${startIndex + 1}-${endIndex} de ${this.pagination.totalItems} resultados`;
          }
        }
      }

      updatePaginationControls() {
        const prevBtn = document.getElementById('prev-page');
        const nextBtn = document.getElementById('next-page');
        const pageNumbers = document.getElementById('page-numbers');

        // Actualizar botones anterior/siguiente
        if (prevBtn) {
          prevBtn.disabled = this.pagination.currentPage <= 1;
        }

        if (nextBtn) {
          nextBtn.disabled = this.pagination.currentPage >= this.pagination.totalPages;
        }

        // Generar n√∫meros de p√°gina
        if (pageNumbers) {
          pageNumbers.innerHTML = '';
          
          if (this.pagination.totalPages <= 1) {
            return;
          }

          // Calcular rango de p√°ginas a mostrar
          const maxButtons = 7;
          let startPage = Math.max(1, this.pagination.currentPage - Math.floor(maxButtons / 2));
          let endPage = Math.min(this.pagination.totalPages, startPage + maxButtons - 1);
          
          // Ajustar si estamos cerca del final
          if (endPage - startPage < maxButtons - 1) {
            startPage = Math.max(1, endPage - maxButtons + 1);
          }

          // Bot√≥n primera p√°gina
          if (startPage > 1) {
            this.createPageButton(pageNumbers, 1, false);
            if (startPage > 2) {
              const ellipsis = document.createElement('span');
              ellipsis.textContent = '...';
              ellipsis.className = 'px-2 py-1 text-gray-500';
              pageNumbers.appendChild(ellipsis);
            }
          }

          // Botones de p√°ginas
          for (let i = startPage; i <= endPage; i++) {
            this.createPageButton(pageNumbers, i, i === this.pagination.currentPage);
          }

          // Bot√≥n √∫ltima p√°gina
          if (endPage < this.pagination.totalPages) {
            if (endPage < this.pagination.totalPages - 1) {
              const ellipsis = document.createElement('span');
              ellipsis.textContent = '...';
              ellipsis.className = 'px-2 py-1 text-gray-500';
              pageNumbers.appendChild(ellipsis);
            }
            this.createPageButton(pageNumbers, this.pagination.totalPages, false);
          }
        }
      }

      createPageButton(container, pageNumber, isActive) {
        const button = document.createElement('button');
        button.textContent = pageNumber;
        button.className = `px-3 py-1 text-sm rounded-md transition-colors duration-200 ${
          isActive 
            ? 'bg-blue-500 text-white' 
            : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
        }`;
        
        if (!isActive) {
          button.addEventListener('click', () => {
            this.pagination.currentPage = pageNumber;
            this.updateDisplay();
          });
        }
        
        container.appendChild(button);
      }

      clearFilters() {
        // Limpiar inputs
        const userSearch = document.getElementById('user-search');

        if (userSearch) userSearch.value = '';

        // Limpiar filtros internos
        this.filters = {
          userSearch: ''
        };

        // Resetear paginaci√≥n
        this.pagination.currentPage = 1;
        
        // Aplicar filtros y actualizar display
        this.applyFilters();
        this.updateDisplay();
      }
    }

    // Funci√≥n global para limpiar filtros
    function clearAllFilters() {
      if (window.dashboardManager) {
        window.dashboardManager.clearFilters();
      }
    }

    // Inicializaci√≥n
    document.addEventListener('DOMContentLoaded', function() {
      window.dashboardManager = new DashboardManager();
      console.log('‚úÖ Dashboard Manager con paginaci√≥n inicializado');
    });
  </script>
</body>
</html>